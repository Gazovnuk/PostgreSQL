
CREATE TABLE old_cities (
  country varchar(255),
  region varchar(255),
  city varchar(255)
);

INSERT INTO old_cities VALUES
  ('Россия', 'Татарстан', 'Бугульма'),
  ('Россия', 'Самарская область', 'Тольятти'),
  ('Россия', 'Татарстан', 'Казань');


Создайте три таблицы countries(1), country_regions(1) и country_region_cities (3),


name
bigint


CREATE TABLE countries(
id bigint PRIMARY KEY,
name varchar(255) 
);
INSERT INTO countries (id, name) 
values (1, 'Россия');

CREATE TABLE country_regions(
id bigint PRIMARY KEY,
name varchar(255),
country_id bigint,
FOREIGN KEY (country_id) REFERENCES countries (id)
);
INSERT INTO country_regions (id, name, country_id) 
values (1,'Татарстан', 1), (2, 'Самарская область',1);


CREATE TABLE country_region_cities(
id bigint PRIMARY KEY,
name varchar(255), 
country_region_id bigint,
FOREIGN KEY (country_region_id) REFERENCES country_regions (id)
);
INSERT INTO country_region_cities(id, name, country_region_id) 
values (1,'Бугульма',1), (2,'Тольятти',2), (3,'Казань',1);







INSERT INTO old_cities VALUES
  ('Россия', 'Татарстан', 'Бугульма'),
  ('Россия', 'Самарская область', 'Тольятти'),
  ('Россия', 'Татарстан', 'Казань');






CREATE TABLE brands (
name varchar(255) PRIMARY KEY,
discount integer 
);

CREATE TABLE cars (
id SERIAL  PRIMARY KEY,
model varchar(255) ,
price integer,
brand varchar(255),

FOREIGN KEY (brand) REFERENCES brands (name)
);

insert into brands (name, discount) 
values 
  ('bmw', 5),
  ('nissan', 10);

insert into cars (model, price) 
values 
  ( 'm5', 5500000),
  ( 'x5m', 6000000),
  ( 'm1', 2500000),
  ( 'almera', 5500000),
  ( 'gt-r', 5000000);
  
  
  
  CREATE TABLE colors (
  -- Одновременное использование и первичного ключа и автогенерации
  id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name varchar(255)
);

INSERT INTO colors (name) VALUES ('Red'), ('Blue');

SELECT * FROM colors;


Вот его структура из документации:

column_name type GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY[ ( sequence_option ) ]
Тип данных может быть SMALLINT, INT или BIGINT
GENERATED ALWAYS — не позволит добавлять значение самостоятельно, используя UPDATE или INSERT
GENERATED BY DEFAULT — в отличие от предыдущего варианта, этот вариант позволяет добавлять значения самостоятельно


create table article_categories (
id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name varchar(255)
);
insert into article_categories (name) values ('fuck'),('mak');




CREATE TABLE products (
    id integer PRIMARY KEY,
    name text NOT NULL,
    price numeric
);
CREATE TABLE orders (
    id integer PRIMARY KEY,
    product_id integer REFERENCES products (id) NOT NULL,
    quantity integer
);

CREATE TABLE products (
    id integer PRIMARY KEY,
    name text UNIQUE,
    price numeric
);

CREATE TABLE products (
    id integer PRIMARY KEY,
    name text,
    locale varchar,
    price numeric,
    UNIQUE(name, locale)
);



CREATE TABLE users (
id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
username text NOT NULL UNIQUE,
email text UNIQUE,
created_at date UNIQUE
);

CREATE TABLE topics (
id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
user_id bigint REFERENCES users (id),
body text NOT NULL,
created_at date NOT NULL
);

select * from users where created_at <= '2018-12-12' or house = 'stark' 
 order by created_at;


select name, salary from departments 
join employees on department_id = departments.id
limit 2 order by salary desc;




